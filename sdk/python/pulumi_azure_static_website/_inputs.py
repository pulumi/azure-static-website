# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'WebsiteCDNConfigArgs',
    'WebsiteDomainConfigArgs',
    'WebsiteStorageConfigArgs',
]

@pulumi.input_type
class WebsiteCDNConfigArgs:
    def __init__(__self__, *,
                 content_types_to_compress: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_compression_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] content_types_to_compress: Whether to restrict traffic to HTTPS only. Defaults to false.
        :param pulumi.Input[bool] is_compression_enabled: The custom domain to use for CNAME records. For example, `www.example.com`.
        """
        if content_types_to_compress is not None:
            pulumi.set(__self__, "content_types_to_compress", content_types_to_compress)
        if is_compression_enabled is not None:
            pulumi.set(__self__, "is_compression_enabled", is_compression_enabled)

    @property
    @pulumi.getter(name="contentTypesToCompress")
    def content_types_to_compress(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Whether to restrict traffic to HTTPS only. Defaults to false.
        """
        return pulumi.get(self, "content_types_to_compress")

    @content_types_to_compress.setter
    def content_types_to_compress(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "content_types_to_compress", value)

    @property
    @pulumi.getter(name="isCompressionEnabled")
    def is_compression_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The custom domain to use for CNAME records. For example, `www.example.com`.
        """
        return pulumi.get(self, "is_compression_enabled")

    @is_compression_enabled.setter
    def is_compression_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_compression_enabled", value)


@pulumi.input_type
class WebsiteDomainConfigArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The domain name of the website -- e.g., `example.com` in `www.example.com`
        :param pulumi.Input[str] subdomain: The subdomain name of the website -- e.g., `www` in `www.example.com`
        :param pulumi.Input[str] resource_group_name: The name of the Azure resource group containing the DNS zone
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subdomain", subdomain)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The domain name of the website -- e.g., `example.com` in `www.example.com`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        The subdomain name of the website -- e.g., `www` in `www.example.com`
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Azure resource group containing the DNS zone
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)


@pulumi.input_type
class WebsiteStorageConfigArgs:
    def __init__(__self__, *,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 enable_https_traffic_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] custom_domain: The custom domain to use for CNAME records. For example, `www.example.com`.
        :param pulumi.Input[bool] enable_https_traffic_only: Whether to restrict traffic to HTTPS only. Defaults to false.
        """
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if enable_https_traffic_only is not None:
            pulumi.set(__self__, "enable_https_traffic_only", enable_https_traffic_only)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The custom domain to use for CNAME records. For example, `www.example.com`.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="enableHttpsTrafficOnly")
    def enable_https_traffic_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to restrict traffic to HTTPS only. Defaults to false.
        """
        return pulumi.get(self, "enable_https_traffic_only")

    @enable_https_traffic_only.setter
    def enable_https_traffic_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_https_traffic_only", value)


